name: "Scan Docker Images"
description: "Scans multiple docker images based on a search pattern using the Trivy image scanner"
author: "Craig Bath"
branding:
  icon: "alert-circle"
  color: "purple"
inputs:
  image_grep:
    description: "Image grep pattern"
    required: true

  severities:
    description: "Comma separated list of severities to check for ('CRITICAL,HIGH, MEDIUM, LOW')"
    required: false
    default: 'HIGH,CRITICAL'

  upload_reports:
    description: "Image grep pattern"
    required: false
    default: 'true'

  exit_on_error:
    description: "Image grep pattern"
    required: false
    default: 'true'

outputs:
  total_issues:
    description: "Total Number of Issues Found"
    value: ${{ steps.scan.outputs.issues }}

runs:
  using: "composite"
  steps:
    - name: 👩‍💻 Install Trivy
      shell: bash
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: 🔍 Grep for Images
      id: images
      shell: bash
      run: |
        export IMAGES=$(docker image list --format "{{.Repository}}:{{.Tag}}"|grep ${{ inputs.image_grep }})
        echo $IMAGES > toscan.txt
        cat toscan.txt

    - name: ☢ Scan Images
      id: scan
      shell: bash
      run: |
        export HTML_REPORT=trivy_image_reports.html
        touch ${HTML_REPORT}
        export TOTAL_ISSUES=0
        echo "0" > issues.txt
        export PURPLE='\033[0;35m'
        
        for IMAGE in $(cat toscan.txt); do
          # Full formatted report
          trivy image --format template --template "@html.tpl" -o full.txt --severity ${{ inputs.severities }} --ignore-unfixed ${IMAGE}
          echo "" >> ${HTML_REPORT}
          cat full.txt >> ${HTML_REPORT}
          
          # Reduce report for GitHub Step Summary
          trivy image --format template --template "@html_simple.tpl" -o simple.txt --severity ${{ inputs.severities }} --ignore-unfixed ${IMAGE}
          echo "" >> $GITHUB_STEP_SUMMARY
          cat simple.txt >> $GITHUB_STEP_SUMMARY;

          # Add cumulative issues
          trivy image -o table.txt --severity ${{ inputs.severities }} --ignore-unfixed ${IMAGE}
          export ISSUES=$(cat table.txt |grep "Total:"| sed 's/^.*Total: //'|sed 's/ .*//'|xargs -n1|awk '{ sum += $1 } END { print sum }')
          export TOTAL_ISSUES=$(expr ${TOTAL_ISSUES} + ${ISSUES})
          printf "${PURPLE}${IMAGE} Issues = ${ISSUES}\n"
          printf "${PURPLE}Cumulative Issues = ${TOTAL_ISSUES}\n"
          echo ${TOTAL_ISSUES} > issues.txt
        done;

        # Set cumulative total issues
        export TOTAL_ISSUES=$(cat issues.txt)
        printf "${PURPLE}Total Issues = ${TOTAL_ISSUES}\n"
        echo "issues=${TOTAL_ISSUES}" >> $GITHUB_OUTPUT
        
    - name: ⬆ Upload Reports
      uses: actions/upload-artifact@v3.1.1
      if: ${{ inputs.upload_reports }} == 'true'
      with:
        name: Trivy Reports - ${{ inputs.image_grep }}
        path: trivy_image_reports.html

    - name: 🐛 Debugging Outputs
      shell: bash
      run: |
        echo "Output = ${{ steps.scan.outputs.issues}}"
        if [ '${{ steps.scan.outputs.issues}}' == '0' ]
        then
            echo "Hey ${{ steps.scan.outputs.issues}} issues here"
        fi

    #- name: 📑 Check Total Issues
    #  if: (steps.scan.outputs.issues != '0') && (${{ inputs.exit_on_error }} == 'true')
    #  uses: actions/github-script@v6.3.3
    #  with:
    #    script: core.setFailed('${{ steps.scan.outputs.issues}} issues found')